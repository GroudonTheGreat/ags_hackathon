package GUI;

import ProjectLibs.ClientTools;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;
import java.util.Vector;

/**
 * @author kashyap
 */
public class AccSelect extends javax.swing.JFrame {

    // the account in question - the one that logged in
    public String userid;
    //<editor-fold defaultstate="collapsed" desc=" All the frame components ">
    private javax.swing.JList accs;
    private javax.swing.JButton goHome;
    private javax.swing.JButton addAcc;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JScrollPane jScrollPane1;
    //</editor-fold>

    /**
     * Creates new form AccSelect
     */
    public AccSelect(String userid) {
        this.userid = userid;
        initComponents();
    }

    public AccSelect() {
        initComponents();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccSelect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new AccSelect().setVisible(true));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        accs = new javax.swing.JList();
        goHome = new javax.swing.JButton();
        addAcc = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                formWindowOpened();
            }
        });
        setTitle("Select Bank Account");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Select Bank Account to use in this session :");

        accs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(accs);
        DefaultListCellRenderer renderer = (DefaultListCellRenderer) accs.getCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);

        goHome.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        goHome.setText("Proceed");
        goHome.addActionListener(evt -> goHomeActionPerformed(evt));

        addAcc.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addAcc.setText("Add Account");
        addAcc.addActionListener(evt -> addAccActionPerformed(evt));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jLabel1))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(90, 90, 90)
                                                .addComponent(addAcc)
                                                .addGap(63, 63, 63)
                                                .addComponent(goHome))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(138, 138, 138)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addGap(26, 26, 26)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(goHome)
                                        .addComponent(addAcc))
                                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void addAccActionPerformed(ActionEvent evt) {
        JSONObject request = new JSONObject(), response;

        int acc = Integer.parseInt(
                JOptionPane.showInputDialog(rootPane, "Enter account number",
                        "Add Account", JOptionPane.QUESTION_MESSAGE)
        );  // get acc no. to add

        //<editor-fold defaultstate="collapsed" desc=" send a 'get otp' request to bank ">
        request.put("operation", "get otp");
        request.put("acc", acc);
        int otp = 0;
        try (ClientTools client = new ClientTools("localhost", 8000)) {
            client.out.writeUTF(request.toJSONString());
            response = (JSONObject) (new JSONParser()).parse(client.in.readUTF());

            if ((boolean) response.get("result")) {   // if request was successful
                otp = Integer.parseInt(response.get("otp").toString());
            } else {  // in case of error
                JOptionPane.showMessageDialog(rootPane, response.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        //</editor-fold>

        if (
                otp == Integer.parseInt(
                        JOptionPane.showInputDialog(rootPane, "Enter otp sent to registered phone number",
                                "Add Account", JOptionPane.QUESTION_MESSAGE)
                )  // get otp from user
        ) {
            //<editor-fold defaultstate="collapsed" desc=" link account to user ">
            request.put("operation", "link acc");
            request.put("userid", userid);

            try (ClientTools client = new ClientTools("localhost", 8000)) {
                client.out.writeUTF(request.toJSONString());
                response = (JSONObject) (new JSONParser()).parse(client.in.readUTF());

                if ((boolean) response.get("result")) {   // if request was successful
                    JOptionPane.showMessageDialog(rootPane, "Account added!", "Success",
                            JOptionPane.PLAIN_MESSAGE);
                    formWindowOpened();
                } else {  // in case of error
                    JOptionPane.showMessageDialog(rootPane, response.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            //</editor-fold>
        } else {
            JOptionPane.showMessageDialog(rootPane, "incorrect otp", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    private void formWindowOpened() {
        JSONObject request = new JSONObject();
        request.put("operation", "get accounts");
        request.put("userid", userid);

        try (ClientTools client = new ClientTools("localhost", 8000)) {
            client.out.writeUTF(request.toJSONString());
            JSONObject response = (JSONObject) (new JSONParser()).parse(client.in.readUTF()); // get response

            if ((Boolean) response.get("result")) {   // if request was successful
                Vector<Integer> v = new Vector<>(); // vector to store all accounts
                JSONArray jsonArray = (JSONArray) response.get("accounts"); // json array we got in response
                // transfer stuff from json array to vector
                for (Object i : jsonArray)
                    v.add(Integer.parseInt(i.toString()));
                accs.setListData(v);
            } else {    // in case of error
                JOptionPane.showMessageDialog(rootPane, response.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void goHomeActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            new Homepage(userid, (int) accs.getSelectedValue()).setVisible(true);   // pass acc no. to next form
            this.dispose();
        } catch (NullPointerException e) { // if no account is selected
            JOptionPane.showMessageDialog(rootPane, "Please select an account");
        }
    }
}
